/* *************************************************************************************************** */
/* ***                         Decimal Base to Another Base Converter                              *** */
/* *************************************************************************************************** */
/*                                                                                                     */
/* Author: Nicolas Senaud <nicolas@senaud.fr>                                                          */
/*                                                                                                     */
/* Description: Convert to a selected base (first argument) to another base a positive number (second  */
/*              argument). The second base need to be a number between 2 and 36, to allow the output   */
/*              to use number ( 0 to 9 ) and letters ( a to z ). The decimal value of the number have  */
/*              to be between 0 and ULLONG_MAX --typically 18,446,744,073,709,551,615 on a 64 bits     */
/*              system-- to avoid overflow.                                                            */
/*                                                                                                     */
/* *************************************************************************************************** */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX 64                                 // I suppose you run a 64 bits system...

char * endp ;                                  // For strtoul function to know if input is too large

int main( int argc, char *argv[] )
{
  if( argc == 1 || ( atoi(argv[1]) < 2 || atoi(argv[1]) > 36)  )
    {
      printf( "base <Base [2 to 36]> <Number>\n" ) ;
      return 1 ;
    }

  /* Variables */

  short         int  base   = atoi(argv[1]) ;
  unsigned long int  nb     = strtoul(argv[2], NULL, 10) ;

  short         int x      = 0     ;           // Number 'nb' in base 'base' has 'x' digit(s).
  short         int n      = 0     ;           // 'n' = value of column's 'x'  digit.
  char              c      = '0'   ;           // 'c' = value of column's 'x' "digit" if n>9.
  char              output [MAX-1] ;           // Output array, char type because of base>10.
  short         int i      = 0     ;


  /* Computing... */

  while( pow(base,x) <= nb )                   // Number 'x' of digit(s)?
    {
      x++ ;
    }

  for( i=x ; i>0 ; i-- )
    {
      n = 0 ;                                  // Setting up the loop.

      while( (n+1)*pow(base,(i-1)) < (nb+1) )
	{
	  n++ ;
	}

      nb = nb-(n*pow(base,(i-1))) ;

      if( n < 10 )
	{
	  output[i] = (n+48) ;                 // Output column by column (if n<9) 'converted' in char.
	}
      else
	{
	  c = 'a' + (n-10) ;                   // Which letter for 'n' (for base>10)?
	  output[i] = c  ;                     // Output column by column (if n>9, for base>10).
	}
    }

  /* Output */

  printf( "%s(%s) = ", argv[2], argv[1] ) ;
  for( i=x ; i>=0 ; i-- )
    {
      printf( "%c", output[i] ) ;
    }

  printf("\n") ;

  return 0 ;
}
